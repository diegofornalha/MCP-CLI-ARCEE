#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
CLI do Arcee AI
"""

from typing import Optional
import json
import typer
from rich import print
from rich.panel import Panel
from rich.prompt import Prompt
from rich.console import Console
from rich.table import Table
from rich.syntax import Syntax
import subprocess
import os
import signal
import sys
import logging
import shutil

from arcee_cli.infrastructure.logging_config import configurar_logging, obter_logger, LOG_DIR, LOG_FILE
from arcee_cli.infrastructure.providers.arcee_provider import ArceeProvider
from arcee_cli.infrastructure.config import configure as config_setup
from arcee_cli.infrastructure.providers.provider_factory import get_provider as get_provider_factory
from arcee_cli.agent.arcee_agent import ArceeAgent

# Configura√ß√£o de logging
configurar_logging()
logger = obter_logger("arcee_cli")

# Importa√ß√£o condicional de crewAI
try:
    from arcee_cli.crew.arcee_crew import ArceeCrew
    CREW_AVAILABLE = True
    logger.info("M√≥dulo crewAI carregado com sucesso")
except ImportError:
    CREW_AVAILABLE = False
    logger.warning("M√≥dulo crewAI n√£o est√° dispon√≠vel, funcionalidades de crew desativadas")

# Importa√ß√£o da vers√£o simplificada do MCP.run
try:
    from arcee_cli.tools.mcpx_simple import MCPRunClient, configure_mcprun
    MCPRUN_SIMPLE_AVAILABLE = True
    logger.info("M√≥dulo MCPRunClient simplificado dispon√≠vel")
except ImportError:
    MCPRUN_SIMPLE_AVAILABLE = False
    logger.warning("M√≥dulo MCPRunClient simplificado n√£o dispon√≠vel")

app = typer.Typer(
    help="""
    ü§ñ CLI do Arcee AI

    Esta CLI permite interagir com a plataforma Arcee AI.
    Use o comando 'configure' para configurar sua chave de API.
    Use o comando 'chat' para iniciar uma conversa com o modelo.
    Use o comando 'teste' para verificar a conex√£o com a API.
    """
)

# Cria um grupo de comandos para o MCP
mcp_app = typer.Typer(
    help="""
    üîå Gerenciamento de ferramentas MCP

    Comandos para gerenciar as integra√ß√µes com MCP.run.
    """
)
app.add_typer(mcp_app, name="mcp")

# Cria um grupo de comandos para logs
logs_app = typer.Typer(
    help="""
    üìù Gerenciamento de logs

    Comandos para visualizar e gerenciar os logs do sistema.
    """
)
app.add_typer(logs_app, name="logs")

# Cria um grupo de comandos para crew
crew_app = typer.Typer(
    help="""
    üë• Gerenciamento de tripula√ß√µes (crews)

    Comandos para gerenciar tripula√ß√µes de agentes usando CrewAI.
    """
)
app.add_typer(crew_app, name="crew")

console = Console()

# Provedor global para ser reutilizado em diferentes comandos
_provider = None
_agent = None
_crew = None
_mcp_session_id = None


def get_provider():
    """
    Obt√©m ou cria um provedor global para comunica√ß√£o com a API

    Returns:
        ArceeProvider: Provedor para comunica√ß√£o com a API
    """
    global _provider
    if _provider is None:
        _provider = ArceeProvider()
    return _provider


def get_agent():
    """
    Obt√©m ou cria um agente global para facilitar o trabalho com ferramentas

    Returns:
        ArceeAgent: Agente para automatizar o trabalho com ferramentas
    """
    global _agent
    if _agent is None:
        _agent = ArceeAgent()
    return _agent


def get_crew():
    """
    Obt√©m ou cria uma tripula√ß√£o global para trabalho coordenado

    Returns:
        ArceeCrew: Tripula√ß√£o para trabalho coordenado ou None se n√£o dispon√≠vel
    """
    global _crew
    if not CREW_AVAILABLE:
        return None

    if _crew is None:
        _crew = ArceeCrew(session_id=_mcp_session_id)
    return _crew


@app.command()
def chat():
    """Inicia um chat com o Arcee AI"""
    logger.info("Iniciando chat com Arcee AI")
    print(
        Panel(
            "ü§ñ Chat com Arcee AI\n\nDigite 'sair' para encerrar.",
            title="Arcee AI",
        )
    )

    provider = get_provider()
    messages = []

    while True:
        try:
            user_input = Prompt.ask("\nVoc√™")

            if user_input.lower() == "sair":
                logger.info("Usu√°rio encerrou o chat")
                break

            logger.debug(f"Mensagem do usu√°rio: {user_input}")
            messages.append({"role": "user", "content": user_input})
            response = provider.generate_content_chat(messages)

            if "error" in response:
                logger.error(f"Erro na resposta: {response['error']}")
                print(f"‚ùå {response['error']}")
                continue

            # O ArceeProvider retorna a resposta na chave 'text'
            if "text" in response:
                content = response["text"]
                # Adiciona a resposta ao hist√≥rico
                messages.append({"role": "assistant", "content": content})
                logger.debug(f"Resposta do assistente: {content}")
                print(f"\nAssistente: {content}")
            else:
                # Fallback para o formato antigo (caso haja altera√ß√µes futuras)
                logger.warning(f"Formato de resposta n√£o reconhecido: {list(response.keys())}")
                print("‚ö†Ô∏è Formato de resposta n√£o reconhecido")
                print(f"Chaves dispon√≠veis: {list(response.keys())}")

        except KeyboardInterrupt:
            logger.info("Chat interrompido pelo usu√°rio (KeyboardInterrupt)")
            break
        except Exception as e:
            logger.exception(f"Erro no chat: {str(e)}")
            print(f"‚ùå Erro: {str(e)}")
            import traceback
            traceback.print_exc()
            break

    logger.info("Chat encerrado")
    print("\nAt√© logo! üëã")


@app.command()
def configure(
    api_key: str = typer.Option(None, help="Chave da API do Arcee"),
    org: str = typer.Option(None, help="Organiza√ß√£o do Arcee"),
):
    """Configura a CLI do Arcee"""
    logger.info("Iniciando configura√ß√£o da CLI")
    config_setup(api_key=api_key, org=org)
    logger.info("Configura√ß√£o da CLI conclu√≠da")


@mcp_app.command("configurar")
def configurar_mcp(
    session_id: Optional[str] = typer.Option(None, help="ID de sess√£o MCP.run existente"),
):
    """Configura a integra√ß√£o com MCP.run"""
    global _mcp_session_id
    
    # Verifica se temos a implementa√ß√£o simplificada dispon√≠vel
    if MCPRUN_SIMPLE_AVAILABLE:
        print("üîÑ Usando implementa√ß√£o simplificada do MCP.run...")
        try:
            # Configura usando a implementa√ß√£o simplificada
            new_session_id = configure_mcprun(session_id)
            
            if new_session_id:
                _mcp_session_id = new_session_id
                print(f"‚úÖ ID de sess√£o MCP.run configurado: {new_session_id}")
                
                # Salvar no arquivo de configura√ß√£o para persist√™ncia
                config_file = os.path.expanduser("~/.arcee/config.json")
                try:
                    # Carrega configura√ß√£o existente
                    config = {}
                    if os.path.exists(config_file):
                        with open(config_file, "r", encoding="utf-8") as f:
                            config = json.load(f)
                            
                    # Atualiza com novo ID de sess√£o
                    config["mcp_session_id"] = new_session_id
                    
                    # Salva a configura√ß√£o
                    with open(config_file, "w", encoding="utf-8") as f:
                        json.dump(config, f, indent=2)
                        
                    logger.info(f"ID de sess√£o MCP.run salvo: {new_session_id}")
                except Exception as e:
                    logger.error(f"Erro ao salvar ID de sess√£o MCP.run: {e}")
                    print(f"‚ö†Ô∏è Erro ao salvar configura√ß√£o: {e}")
                
                # Teste a conex√£o listando ferramentas
                client = MCPRunClient(session_id=new_session_id)
                tools = client.get_tools()
                print(f"‚ÑπÔ∏è Encontradas {len(tools)} ferramentas dispon√≠veis")
                
                return
            else:
                print("‚ùå N√£o foi poss√≠vel configurar o MCP.run")
                print("üí° Verifique os logs para mais detalhes")
                return
        except Exception as e:
            logger.exception(f"Erro ao configurar MCP.run simplificado: {e}")
            print(f"‚ùå Erro ao configurar MCP.run: {e}")
            return
    
    # Caso n√£o tenha a implementa√ß√£o simplificada
    print("‚ùå M√≥dulo MCP.run n√£o est√° dispon√≠vel")
    print("üí° Verifique a instala√ß√£o do pacote simplificado")


@mcp_app.command("listar")
def listar_ferramentas_mcp():
    """Lista todas as ferramentas dispon√≠veis no MCP.run"""
    # Verifica se temos a implementa√ß√£o simplificada dispon√≠vel
    if MCPRUN_SIMPLE_AVAILABLE:
        global _mcp_session_id
        
        # Carrega ID de sess√£o se n√£o estiver definido
        if not _mcp_session_id:
            config_file = os.path.expanduser("~/.arcee/config.json")
            if os.path.exists(config_file):
                try:
                    with open(config_file, "r", encoding="utf-8") as f:
                        config = json.load(f)
                        _mcp_session_id = config.get("mcp_session_id")
                except Exception as e:
                    logger.error(f"Erro ao carregar ID de sess√£o MCP.run: {e}")
        
        # Verifica se temos um ID de sess√£o
        if not _mcp_session_id:
            print("‚ùå ID de sess√£o MCP.run n√£o configurado")
            print("üí° Execute primeiro: arcee mcp configurar")
            return
            
        # Obt√©m as ferramentas com a implementa√ß√£o simplificada
        print("üîç Obtendo lista de ferramentas dispon√≠veis...")
        try:
            client = MCPRunClient(session_id=_mcp_session_id)
            tools = client.get_tools()
            
            if not tools:
                print("‚ÑπÔ∏è Nenhuma ferramenta MCP.run dispon√≠vel")
                return
                
            # Cria a tabela
            tabela = Table(title="üîå Ferramentas MCP.run")
            tabela.add_column("Nome", style="cyan")
            tabela.add_column("Descri√ß√£o", style="green")
            
            # Adiciona as ferramentas √† tabela
            for tool in tools:
                tabela.add_row(tool["name"], tool["description"])
                
            # Exibe a tabela
            console.print(tabela)
            
        except Exception as e:
            logger.exception(f"Erro ao listar ferramentas MCP.run: {e}")
            print(f"‚ùå Erro ao listar ferramentas MCP.run: {e}")
        return
    
    # Caso n√£o tenha a implementa√ß√£o simplificada
    print("‚ùå M√≥dulo MCP.run n√£o est√° dispon√≠vel")
    print("üí° Verifique a instala√ß√£o do pacote simplificado")


@mcp_app.command("executar")
def executar_ferramenta(
    nome: str = typer.Argument(..., help="Nome da ferramenta para executar"),
    params: str = typer.Option(None, help="Par√¢metros da ferramenta em formato JSON"),
):
    """Executa uma ferramenta MCP.run espec√≠fica"""
    if not MCPRUN_SIMPLE_AVAILABLE:
        print("‚ùå M√≥dulo MCP.run n√£o est√° dispon√≠vel")
        print("üí° Verifique a instala√ß√£o do pacote simplificado")
        return
        
    global _mcp_session_id
    
    # Carrega ID de sess√£o se n√£o estiver definido
    if not _mcp_session_id:
        config_file = os.path.expanduser("~/.arcee/config.json")
        if os.path.exists(config_file):
            try:
                with open(config_file, "r", encoding="utf-8") as f:
                    config = json.load(f)
                    _mcp_session_id = config.get("mcp_session_id")
            except Exception as e:
                logger.error(f"Erro ao carregar ID de sess√£o MCP.run: {e}")
    
    # Verifica se temos um ID de sess√£o
    if not _mcp_session_id:
        print("‚ùå ID de sess√£o MCP.run n√£o configurado")
        print("üí° Execute primeiro: arcee mcp configurar")
        return
        
    # Processa os par√¢metros
    try:
        params_dict = {}
        if params:
            params_dict = json.loads(params)
    except json.JSONDecodeError as e:
        logger.error(f"Erro ao decodificar JSON: {e}")
        print(f"‚ùå Erro nos par√¢metros JSON: {e}")
        return
        
    # Executa a ferramenta
    print(f"üöÄ Executando ferramenta '{nome}'...")
    try:
        client = MCPRunClient(session_id=_mcp_session_id)
        result = client.run_tool(nome, params_dict)
        
        if "error" in result:
            print(f"‚ùå Erro ao executar ferramenta: {result['error']}")
            if "raw_output" in result:
                print("Sa√≠da original:")
                print(result["raw_output"])
        else:
            print("‚úÖ Resultado:")
            print(json.dumps(result, indent=2, ensure_ascii=False))
            
    except Exception as e:
        logger.exception(f"Erro ao executar ferramenta: {e}")
        print(f"‚ùå Erro ao executar ferramenta: {e}")


@crew_app.command("configurar")
def configurar_crew(
    config_dir: str = typer.Option(
        os.path.expanduser("~/.arcee/config"),
        help="Diret√≥rio para arquivos de configura√ß√£o"
    ),
    agents_file: str = typer.Option(
        "agents.yaml",
        help="Nome do arquivo de configura√ß√£o de agentes"
    ),
    tasks_file: str = typer.Option(
        "tasks.yaml",
        help="Nome do arquivo de configura√ß√£o de tarefas"
    )
):
    """Configura arquivos para tripula√ß√£o CrewAI"""
    if not CREW_AVAILABLE:
        print("‚ùå M√≥dulo CrewAI n√£o est√° dispon√≠vel. Instale: pip install crewai")
        print("üí° Voc√™ tamb√©m pode instalar todas as depend√™ncias: pip install -r requirements.txt")
        return
        
    # Cria diret√≥rio se n√£o existir
    if not os.path.exists(config_dir):
        os.makedirs(config_dir, exist_ok=True)
        logger.info(f"Diret√≥rio de configura√ß√£o criado: {config_dir}")
    
    # Inicializa a tripula√ß√£o para criar os arquivos de configura√ß√£o padr√£o
    try:
        crew = ArceeCrew(
            config_dir=config_dir,
            agents_file=agents_file,
            tasks_file=tasks_file,
            session_id=_mcp_session_id
        )
        
        agents_path = os.path.join(config_dir, agents_file)
        tasks_path = os.path.join(config_dir, tasks_file)
        
        print(f"‚úÖ Configura√ß√£o da tripula√ß√£o conclu√≠da")
        print(f"üìÇ Diret√≥rio de configura√ß√£o: {config_dir}")
        print(f"üìÑ Arquivo de agentes: {agents_path}")
        print(f"üìÑ Arquivo de tarefas: {tasks_path}")
        
    except Exception as e:
        logger.exception(f"Erro ao configurar tripula√ß√£o: {e}")
        print(f"‚ùå Erro ao configurar tripula√ß√£o: {e}")


@crew_app.command("executar")
def executar_crew(
    config_dir: str = typer.Option(
        os.path.expanduser("~/.arcee/config"),
        help="Diret√≥rio para arquivos de configura√ß√£o"
    ),
    agents_file: str = typer.Option(
        "agents.yaml",
        help="Nome do arquivo de configura√ß√£o de agentes"
    ),
    tasks_file: str = typer.Option(
        "tasks.yaml",
        help="Nome do arquivo de configura√ß√£o de tarefas"
    ),
    process: str = typer.Option(
        "sequential",
        help="Tipo de processo (sequential ou hierarchical)"
    )
):
    """Executa a tripula√ß√£o CrewAI com as configura√ß√µes especificadas"""
    if not CREW_AVAILABLE:
        print("‚ùå M√≥dulo CrewAI n√£o est√° dispon√≠vel. Instale: pip install crewai")
        print("üí° Voc√™ tamb√©m pode instalar todas as depend√™ncias: pip install -r requirements.txt")
        return
        
    if not MCPRUN_SIMPLE_AVAILABLE:
        print("‚ùå M√≥dulo MCP.run n√£o est√° dispon√≠vel.")
        print("üí° Verifique a instala√ß√£o do pacote simplificado")
        return
        
    # Carrega ID de sess√£o se n√£o estiver definido
    global _mcp_session_id
    if not _mcp_session_id:
        config_file = os.path.expanduser("~/.arcee/config.json")
        if os.path.exists(config_file):
            try:
                with open(config_file, "r", encoding="utf-8") as f:
                    config = json.load(f)
                    _mcp_session_id = config.get("mcp_session_id")
            except Exception as e:
                logger.error(f"Erro ao carregar ID de sess√£o MCP.run: {e}")
    
    # Verifica se temos um ID de sess√£o
    if not _mcp_session_id:
        print("‚ùå ID de sess√£o MCP.run n√£o configurado")
        print("üí° Execute primeiro: arcee mcp configurar")
        return
        
    # Verifica se os arquivos de configura√ß√£o existem
    agents_path = os.path.join(config_dir, agents_file)
    tasks_path = os.path.join(config_dir, tasks_file)
    
    if not os.path.exists(agents_path):
        print(f"‚ùå Arquivo de agentes n√£o encontrado: {agents_path}")
        print("üí° Execute primeiro: arcee crew configurar")
        return
        
    if not os.path.exists(tasks_path):
        print(f"‚ùå Arquivo de tarefas n√£o encontrado: {tasks_path}")
        print("üí° Execute primeiro: arcee crew configurar")
        return
    
    # Inicializa e executa a tripula√ß√£o
    try:
        print("üöÄ Inicializando tripula√ß√£o CrewAI...")
        crew = ArceeCrew(
            config_dir=config_dir,
            agents_file=agents_file,
            tasks_file=tasks_file,
            session_id=_mcp_session_id,
            process=process
        )
        
        print("‚è≥ Criando agentes e tarefas...")
        crew.create_agents()
        crew.create_tasks()
        crew.create_crew()
        
        print("üîÑ Executando tripula√ß√£o...")
        resultado = crew.run()
        
        print("\n‚úÖ Execu√ß√£o conclu√≠da!\n")
        print(Panel(
            resultado,
            title="Resultado",
            border_style="green"
        ))
        
    except Exception as e:
        logger.exception(f"Erro ao executar tripula√ß√£o: {e}")
        print(f"‚ùå Erro ao executar tripula√ß√£o: {e}")


@logs_app.command("listar")
def listar_logs():
    """Lista os arquivos de log dispon√≠veis"""
    logger.info("Listando arquivos de log")
    try:
        # Verifica se o diret√≥rio de logs existe
        if not os.path.exists(LOG_DIR):
            print(f"‚ùå Diret√≥rio de logs n√£o encontrado: {LOG_DIR}")
            return
            
        # Lista arquivos de log
        logs = [f for f in os.listdir(LOG_DIR) if f.endswith('.log')]
        
        if not logs:
            print("‚ÑπÔ∏è Nenhum arquivo de log encontrado.")
            return
            
        # Cria a tabela
        tabela = Table(title="üìù Arquivos de Log")
        tabela.add_column("Nome", style="cyan")
        tabela.add_column("Tamanho", style="green")
        tabela.add_column("Data de Modifica√ß√£o", style="yellow")
        
        # Adiciona os arquivos √† tabela
        for log_file in logs:
            path = os.path.join(LOG_DIR, log_file)
            size = os.path.getsize(path)
            size_str = f"{size / 1024:.2f} KB" if size > 1024 else f"{size} bytes"
            mtime = os.path.getmtime(path)
            import datetime
            mtime_str = datetime.datetime.fromtimestamp(mtime).strftime("%Y-%m-%d %H:%M:%S")
            
            tabela.add_row(log_file, size_str, mtime_str)
            
        # Exibe a tabela
        console.print(tabela)
        
    except Exception as e:
        logger.exception(f"Erro ao listar logs: {e}")
        print(f"‚ùå Erro ao listar logs: {e}")


@logs_app.command("ver")
def ver_log(
    linhas: int = typer.Option(50, help="N√∫mero de linhas para exibir"),
    arquivo: str = typer.Option("arcee.log", help="Nome do arquivo de log para exibir"),
):
    """Exibe o conte√∫do do arquivo de log"""
    logger.info(f"Exibindo {linhas} linhas do arquivo de log {arquivo}")
    try:
        # Constr√≥i o caminho do arquivo
        path = os.path.join(LOG_DIR, arquivo)
        
        # Verifica se o arquivo existe
        if not os.path.exists(path):
            print(f"‚ùå Arquivo de log n√£o encontrado: {path}")
            return
            
        # L√™ as √∫ltimas linhas do arquivo
        with open(path, "r", encoding="utf-8") as f:
            # L√™ todas as linhas do arquivo
            all_lines = f.readlines()
            
            # Obt√©m as √∫ltimas 'linhas' linhas
            last_lines = all_lines[-linhas:] if len(all_lines) > linhas else all_lines
            
            # Junta as linhas em uma string
            content = "".join(last_lines)
            
            # Exibe o conte√∫do
            syntax = Syntax(content, "python", theme="monokai", line_numbers=True)
            console.print(Panel(syntax, title=f"üìù {arquivo} (√∫ltimas {len(last_lines)} de {len(all_lines)} linhas)"))
            
    except Exception as e:
        logger.exception(f"Erro ao exibir log: {e}")
        print(f"‚ùå Erro ao exibir log: {e}")


@logs_app.command("limpar")
def limpar_logs(
    confirmar: bool = typer.Option(False, "--sim", help="Confirma a opera√ß√£o sem prompt"),
):
    """Limpa os arquivos de log"""
    logger.info("Solicita√ß√£o para limpar logs")
    try:
        # Verifica se o diret√≥rio de logs existe
        if not os.path.exists(LOG_DIR):
            print(f"‚ÑπÔ∏è Diret√≥rio de logs n√£o encontrado: {LOG_DIR}")
            return
            
        # Lista arquivos de log
        logs = [f for f in os.listdir(LOG_DIR) if f.endswith('.log')]
        
        if not logs:
            print("‚ÑπÔ∏è Nenhum arquivo de log encontrado para limpar.")
            return
            
        # Confirma a opera√ß√£o
        if not confirmar:
            confirmacao = Prompt.ask(
                f"‚ö†Ô∏è Deseja realmente limpar {len(logs)} arquivos de log?",
                choices=["s", "n"],
                default="n"
            )
            
            if confirmacao.lower() != "s":
                print("‚ùå Opera√ß√£o cancelada pelo usu√°rio.")
                return
                
        # Limpa os arquivos
        for log_file in logs:
            path = os.path.join(LOG_DIR, log_file)
            try:
                # Abre o arquivo em modo de escrita para trunc√°-lo
                with open(path, "w") as f:
                    pass
                logger.info(f"Arquivo de log limpo: {log_file}")
            except Exception as e:
                logger.error(f"Erro ao limpar arquivo {log_file}: {e}")
                print(f"‚ö†Ô∏è Erro ao limpar arquivo {log_file}: {e}")
                
        print(f"‚úÖ {len(logs)} arquivos de log foram limpos com sucesso.")
        
    except Exception as e:
        logger.exception(f"Erro ao limpar logs: {e}")
        print(f"‚ùå Erro ao limpar logs: {e}")


@logs_app.command("nivel")
def definir_nivel(
    nivel: str = typer.Argument(
        ..., 
        help="N√≠vel de log (debug, info, warning, error, critical)"
    ),
    sessao_atual: bool = typer.Option(
        True, 
        help="Aplica o n√≠vel apenas √† sess√£o atual (n√£o permanente)"
    ),
):
    """Define o n√≠vel de log para a aplica√ß√£o"""
    logger.info(f"Solicita√ß√£o para definir n√≠vel de log para: {nivel}")
    
    # Mapeia strings para n√≠veis do logging
    niveis = {
        "debug": logging.DEBUG,
        "info": logging.INFO,
        "warning": logging.WARNING,
        "error": logging.ERROR,
        "critical": logging.CRITICAL,
    }
    
    if nivel.lower() not in niveis:
        print(f"‚ùå N√≠vel de log inv√°lido: {nivel}")
        print(f"‚ÑπÔ∏è N√≠veis v√°lidos: {', '.join(niveis.keys())}")
        return
        
    nivel_log = niveis[nivel.lower()]
    
    # Define o n√≠vel do logger raiz
    logging.getLogger().setLevel(nivel_log)
    
    # Se solicitado para ser permanente, altera as configura√ß√µes permanentes
    # Esta parte precisaria de uma implementa√ß√£o para salvar as configura√ß√µes
    
    print(f"‚úÖ N√≠vel de log definido para: {nivel.upper()}")
    
    if sessao_atual:
        print("‚ÑπÔ∏è Esta configura√ß√£o se aplica apenas √† sess√£o atual.")


@logs_app.command("teste")
def testar_logs():
    """Gera mensagens de log de teste em todos os n√≠veis"""
    logger.info("Executando teste de logging em todos os n√≠veis")
    
    print("üß™ Gerando mensagens de teste em todos os n√≠veis de log...")
    
    # Gera mensagens de log em todos os n√≠veis
    logger.debug("Esta √© uma mensagem de DEBUG para teste")
    logger.info("Esta √© uma mensagem de INFO para teste")
    logger.warning("Esta √© uma mensagem de WARNING para teste") 
    logger.error("Esta √© uma mensagem de ERROR para teste")
    logger.critical("Esta √© uma mensagem de CRITICAL para teste")
    
    try:
        # Simula um erro para demonstrar o logger.exception
        1 / 0
    except Exception as e:
        logger.exception("Esta √© uma demonstra√ß√£o de logger.exception")
    
    print("‚úÖ Mensagens de teste geradas com sucesso")
    print("üí° Use 'arcee logs ver' para visualizar as mensagens no arquivo de log")


if __name__ == "__main__":
    try:
        # Carrega a configura√ß√£o MCP.run
        config_file = os.path.expanduser("~/.arcee/config.json")
        if os.path.exists(config_file):
            try:
                with open(config_file, "r", encoding="utf-8") as f:
                    config = json.load(f)
                    _mcp_session_id = config.get("mcp_session_id")
                    if _mcp_session_id:
                        logger.info(f"ID de sess√£o MCP.run carregado: {_mcp_session_id}")
            except Exception as e:
                logger.error(f"Erro ao carregar configura√ß√£o MCP.run: {e}")
        
        app()
    except KeyboardInterrupt:
        logger.info("Programa encerrado pelo usu√°rio via KeyboardInterrupt")
        print("\nüëã Programa encerrado pelo usu√°rio")
        sys.exit(0)
