#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo de interface de usu√°rio do chat

Este m√≥dulo fornece a classe ChatUI para gerenciar a interface 
de usu√°rio do chat, exibindo mensagens e obtendo entrada do usu√°rio.
"""

class ChatUI:
    """Gerencia a interface de usu√°rio do chat"""
    
    def __init__(self):
        """Inicializa a interface de usu√°rio do chat"""
        self.prompt = "\nüë§ Voc√™: "
    
    def show_welcome_message(self, servers=None):
        """
        Exibe mensagem de boas-vindas
        
        Args:
            servers (list, optional): Lista de servidores MCP dispon√≠veis
        """
        print("\nü§ñ Chat Interativo com Arcee (modo 'auto') + Integra√ß√£o MCP iniciado!")
        print("   Digite 'sair', 'exit' ou 'quit' para encerrar o chat.")
        print("   Digite 'limpar' ou 'clear' para limpar o hist√≥rico.")
        if servers:
            print(f"   Servidores MCP dispon√≠veis: {', '.join(servers)}\n")
    
    def get_user_input(self):
        """
        Obt√©m entrada do usu√°rio
        
        Returns:
            str: Texto inserido pelo usu√°rio
        """
        return input(self.prompt)
    
    def show_thinking(self):
        """Mostra indicador de processamento"""
        print("\nüîÑ Processando...")
    
    def show_response(self, text):
        """
        Exibe resposta do assistente
        
        Args:
            text (str): Texto da resposta
        """
        print(f"\nü§ñ Arcee: {text}")
    
    def show_model_info(self, response_data):
        """
        Exibe informa√ß√µes sobre o modelo utilizado
        
        Args:
            response_data (dict): Dados de resposta contendo informa√ß√µes do modelo
        """
        # S√≥ exibe se tiver informa√ß√µes do modelo selecionado
        selected_model = response_data.get("selected_model")
        if selected_model:
            print(f"\n--- Informa√ß√µes do Modelo ---")
            print(f"Modelo selecionado: {selected_model}")
            
            if response_data.get("selection_reason"):
                print(f"Raz√£o da sele√ß√£o: {response_data.get('selection_reason')}")
            
            if response_data.get("task_type"):
                print(f"Tipo de tarefa: {response_data.get('task_type')}")
            
            if response_data.get("domain"):
                print(f"Dom√≠nio: {response_data.get('domain')}")
            
            if response_data.get("complexity"):
                print(f"Complexidade: {response_data.get('complexity')}")
            
            print(f"Modelo usado: {response_data.get('model', 'desconhecido')}")
            print("-----------------------------")
    
    def show_error(self, error_message):
        """
        Exibe mensagem de erro
        
        Args:
            error_message (str): Mensagem de erro
        """
        print(f"\n‚ùå Erro: {error_message}")
    
    def show_warning(self, warning_message):
        """
        Exibe mensagem de aviso
        
        Args:
            warning_message (str): Mensagem de aviso
        """
        print(f"\n‚ö†Ô∏è Aviso: {warning_message}")
    
    def show_servers_list(self, servers):
        """
        Exibe lista de servidores dispon√≠veis
        
        Args:
            servers (list): Lista de servidores
        """
        print(f"\nüìã Servidores MCP dispon√≠veis: {', '.join(servers)}")
    
    def show_goodbye(self):
        """Exibe mensagem de despedida"""
        print("\nüëã Encerrando chat. At√© a pr√≥xima!")
    
    def show_history_cleared(self):
        """Exibe confirma√ß√£o de limpeza do hist√≥rico"""
        print("\nüßπ Hist√≥rico de chat limpo!\n") 